<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notas de Programador</title>
    <link>/</link>
    <description>Recent content on Notas de Programador</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-PE</language>
    <lastBuildDate>Sun, 17 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Requirements.txt</title>
      <link>/python/requirements.txt/</link>
      <pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>/python/requirements.txt/</guid>
      <description>¿Cual es el equivalente de package.json en python? La solución es simple, usaremos freeze, este pequeño y poderoso comando nos retornará los paquetes que instalamos en nuestro proyecto, hay que tener en cuenta que esto solo es para los paquetes, no es para ejecutar como se hace en nodejs con npm run o npm start.
Ejemplos
 Generando salida para un archivo de requisitos
&amp;gt; pip freeze docutils==0.11 Jinja2==2.7.2 MarkupSafe==0.</description>
    </item>
    
    <item>
      <title>Backoff</title>
      <link>/peticiones-http/backoff/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/peticiones-http/backoff/</guid>
      <description>Para crear un backoff en javascript iniciaremos con el retorno de una promesa que contiene un setTimeout, para poder ejecutar tenemos que anteponer el await para &amp;ldquo;esperar&amp;rdquo;.
Esto es util cuando queremos realizar reintentos, podemos iniciar con 1&amp;frasl;2 segundo, luego ir multiplicando para que el tiempo de espera sea más.
const backoff = (delay) =&amp;gt; new Promise(res =&amp;gt; setTimeout(res, delay)); // ejemplo de ejecución (async() =&amp;gt; { await backoff(500); // 500 =&amp;gt; milisegundos console.</description>
    </item>
    
    <item>
      <title>Lógica de reintentos</title>
      <link>/peticiones-http/logica-de-reintentos/</link>
      <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/peticiones-http/logica-de-reintentos/</guid>
      <description>Las promesas son una abstracción invaluable en torno a resultados &amp;lsquo;eventuales&amp;rsquo; dentro de operaciones asincrónicas. Recientemente tuve la necesidad de poder volver a intentar una acción basada en Promesa en caso de falla. Resultó ser muy fácil implementar tal proceso usando construcciones recursivas simples.
Inicialmente solo requería la capacidad de volver a intentar la cantidad deseada de veces, antes de fallar eventualmente si aún no tenía éxito.
El siguiente código lo que realiza es que si una &amp;ldquo;petición http&amp;rdquo; falla, entra al catch por defecto, luego valida los retries, en caso que es este sea cero retornará el error en si.</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/credits/</guid>
      <description>Contributors Thanks to them  for making Open Source Software a better place !
.ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start }
.ghContributors &amp;gt; div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors &amp;gt; div label{ padding-left: 4px ; } .ghContributors &amp;gt; div span{ font-size: x-small; padding-left: 4px ; }
  @matcornic 156 commits 
 @matalo33 39 commits 
 @coliff 17 commits 
 @lierdakil 16 commits</description>
    </item>
    
    <item>
      <title>Showcase</title>
      <link>/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/showcase/</guid>
      <description> TAT by OVH Tshark.dev by Ross Jacobs </description>
    </item>
    
  </channel>
</rss>